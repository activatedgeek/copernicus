---
import { getEntry } from "astro:content";

import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Goatcounter from "./Goatcounter.astro";

import "@styles/main.css";

const {
  frontmatter: { title, description, area, date, updated, keywords, authors },
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, import.meta.env.SITE);

const authorsList = await Promise.all(
  authors.map(async ({ collection: c, id }) => await getEntry(c, id)),
);

const {
  data: { name: siteAuthorName },
} = await getEntry("authors", "sk");

const {
  data: { backgroundColor: themeColor },
} = await getEntry(area.collection, area.id);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" href="/favicon.png" />

    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={canonicalURL.href} />
    <meta name="giscus:backlink" content={canonicalURL.href} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Assistant:wght@200..800&display=swap"
      rel="stylesheet"
    />

    <title>{title} | {siteAuthorName}</title>
    <meta name="theme-color" content={themeColor} />
    <meta name="description" content={description} />
    {
      authorsList.map(({ data: { name, url } }) => (
        <>
          <meta name="author" content={name} />
          <link rel="author" href={url} />
        </>
      ))
    }

    <meta name="keywords" content={(keywords || []).join(",")} />
    <meta name="publisher" content={canonicalURL.hostname} />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="article" />
    {
      date ? (
        <meta property="article:published_time" content={date.toISOString()} />
      ) : null
    }

    {
      updated ? (
        <meta
          property="article:modified_time"
          content={updated.toISOString()}
        />
      ) : null
    }
    {
      authorsList.map(({ data: { name } }) => (
        <meta property="article:author" content={name} />
      ))
    }

    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />

    <Goatcounter />

    <slot name="head" />
  </head>
  <body>
    <Header area={area} />
    <slot />
    <Footer />
  </body>
</html>
